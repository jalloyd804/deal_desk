import { useEffect, useState } from 'react';
import {
    styled,
    Box,
    Modal,
    IconButton,
    Tabs,
    Tab
} from '@mui/material';
import { useInsight } from '@semoss/sdk-react';
import { Sidebar } from '../components/Sidebar';
import { VectorModal } from '../components/VectorModal';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import { DocBotPanel } from './DocBotPanel'
import { SummaryPanel } from './SummaryPanel'
import { AIBotError } from './Error'
import { Model } from '../interfaces/Model'
import { makeStyles } from '@material-ui/core/styles';


const useStyles = makeStyles(theme => ({
    root: {
        '& [class*="MuiButtonBase-root-MuiTab-root"]': {
            'max-width': "100%",
            'width': '50%',
            'border': 'solid',
            'border-color': 'lightgray',
            'border-radius': '5px 5px 0 0'
        },
        '& .MuiTabs-indicator': {
            'background-color': 'unset'
        },
        '& .Mui-selected ': {
            'border-color': '#40007B',
            'border-width': '2px',
            'color': '#40007B',
            'background-color' : 'white'
        }
    }
}));

const StyledLayout = styled('div')(() => ({
    display: 'flex',
    flexDirection: 'row',
    height: '100%',
    overflow: 'auto',
}));

const StyledButton = styled(IconButton)(() => ({
    position: 'fixed',
    left: '0%',
    marginRight: 'auto',
}));

const PoweredBy = styled('div')(() => ({
    color: '#4F4F4F',
    alignSelf: 'center',
    //padding: '0  0 2rem 280px',
}));

const StyledPolicy = styled('div')(({ theme }) => ({
    display: 'flex',
    flexDirection: 'column',
    width: '100%'
}));

const welcomeText = `
The AI Document Bot is a chat interface between users and uploaded documents.
Upload policies, proposals, meeting minutes, operational procedures,
policy manuals as PDFâ€™s or Word documents and ask questions.
To begin, select a document repository on the left or create a new one.
The Document Bot searches through the selected documents for content to answer questions.
It is best to spell out acronyms to improve the results.
If the user was to ask about large language models, it is recommended to format the
question as: What are large language models (LLMs)?
`;

const warningText = `
You are ultimately responsible for ensuring the accuracy, completeness, and
relevance of any output generated by this tool and how the generated output is used.
Please note, that responses from this tool may be inaccurate (hallucinations), outdated,
incomplete, or not aligned to your specific needs.
You should always independently understand and verify that the content generated is accurate in your
specific context and suitable for your use.
Where possible review other sources of information to verify accuracy of the generated content.
Please make any necessary edits before sharing the output from this tool.
`;

interface Dictionary {
    [key: string]: any;
}

export interface VectorContext {
    score: string;
    doc_index: string;
    tokens: string;
    content: string;
    url: string;
}
interface TabPanelProps {
    children?: React.ReactNode;
    index: number;
    value: number;
}

function CustomTabPanel(props: TabPanelProps) {
    const { children, value, index, ...other } = props;

    return (
        <div
            role="tabpanel"
            hidden={value !== index}
            id={`simple-tabpanel-${index}`}
            aria-labelledby={`simple-tab-${index}`}
            {...other}
        >
            {value === index && <Box sx={{ p: 0 }}>{children}</Box>}
        </div>
    );
}

function a11yProps(index: number) {
    return {
        id: `simple-tab-${index}`,
        'aria-controls': `simple-tabpanel-${index}`,
    };
}

function BasicTabs({
    showContext,
    sideOpen,
    openBeta,
    setOpenBeta,
    genAnswerDisabled,
    setShowContext,
    temperature,
    setSummarySelected,
    selectedVectorDB,
    setSelectedVectorDB,
    vectorOptions,
    setRefresh,
    limit,
    open,
    setOpen
}) {
    const [value, setValue] = useState(0);

    const handleChange = (event: React.SyntheticEvent, newValue: number) => {
        setSummarySelected(newValue);
        setValue(newValue);
    };
    const classes = useStyles();

    return (
        <Box sx={{ width: '100%', padding: '2%' }}>
            <Box sx={{ borderBottom: 1, borderColor: 'divider', padding: 0 }}>
                <Tabs className={classes.root} value={value} onChange={handleChange} aria-label="basic tabs example">
                    <Tab label="Document Bot Chat" {...a11yProps(0)} />
                    <Tab label="Document Summarization" {...a11yProps(1)} />
                </Tabs>
            </Box>
            <CustomTabPanel value={value} index={0}>
            <DocBotPanel    sideOpen={sideOpen}
                            welcomeText={welcomeText}
                            warningText={warningText}
                            openBeta={openBeta}
                            setOpenBeta={setOpenBeta}
                            genAnswerDisabled={genAnswerDisabled}
                            showContext={showContext}
                            setShowContext={setShowContext}
                            selectedVectorDB={selectedVectorDB}
                            temperature = {temperature}
                            setSelectedVectorDB = {setSelectedVectorDB}
                            vectorOptions={vectorOptions}
                            setRefresh = {setRefresh}
                            limit = {limit}
                            open = {open}
                            setOpen ={setOpen}/>
            </CustomTabPanel>
            <CustomTabPanel value={value} index={1}>
                <SummaryPanel 
                sideOpen = {sideOpen}
                temperature={temperature}/>
            </CustomTabPanel>
        </Box>
    );
}
export const PolicyPage = () => {
    const { actions } = useInsight();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [showContext, setShowContext] = useState(false);
    const [showDocManage, setShowDocManage] = useState(false);
    const [openBeta, setOpenBeta] = useState(true);
    const [summarySelected, setSummarySelected] = useState(false);
    
    // Model Catalog and first model in dropdown
    const [modelOptions, setModelOptions] = useState([]);
    const [selectedModel, setSelectedModel] = useState<Model>({});

    // Vector DB catalog and first vector DB in dropdown
    const [vectorOptions, setVectorOptions] = useState([]);
    const [selectedVectorDB, setSelectedVectorDB] = useState<Model>({});
    //Controlling the modal
    const [refresh, setRefresh] = useState<boolean>(false);

    //Controlling the Sidebar
    const [sideOpen, setSideOpen] = useState<boolean>(true);
    
    const [limit, setLimit] = useState<number>(5);
    const [temperature, setTemperature] = useState<number>(0.3);
    

    const [open, setOpen] = useState<boolean>(false);

    let model = ''
    if (process.env.ENVIRONMENTFLAG === "Deloitte") {
        model = "4801422a-5c62-421e-a00c-05c6a9e15de8"
    }
    else if (process.env.ENVIRONMENTFLAG === "NIH") {
        model = "f89f9eec-ba78-4059-9f01-28e52d819171"
    }

    useEffect(() => {
        setIsLoading(true);
        //Grabbing all the Models that are in CfG
        let pixel = `MyEngines ( engineTypes=["MODEL"]);`;

        actions.run(pixel).then((response) => {
            const { output, operationType } = response.pixelReturn[0];

            if (operationType.indexOf('ERROR') > -1) {
                throw new Error(output as string);
            }
            if (Array.isArray(output)) {
                setModelOptions(output);
                const mdl = output.find(m => m.app_id === model);
                if (mdl === undefined)
                    setError("You do not have access to the model");
                setSelectedModel(mdl);
            }
        });
        //Grabbing all the Vector Databases in CfG
        pixel = `MyEngines ( engineTypes=["VECTOR"]);`;

        actions.run(pixel).then((response) => {
            const { output, operationType } = response.pixelReturn[0];

            if (operationType.indexOf('ERROR') > -1) {
                throw new Error(output as string);
            }
            if (Array.isArray(output)) {
                runOutput(output);
            }
        });

        setIsLoading(false);
        

    }, []);

    useEffect(() => {
        let pixel = `MyEngines ( engineTypes=["VECTOR"]);`;

        actions.run(pixel).then((response) => {
            const { output, operationType } = response.pixelReturn[0];
            if (operationType.indexOf('ERROR') > -1) {
                throw new Error(output as string);
            }
            if (Array.isArray(output)) {
                runOutput(output);
            }
        });

        pixel = `MyEngines ( engineTypes=["VECTOR"], permissionFilters=[1]);`;
        actions.run(pixel).then((response) => {
            const { output, operationType } = response.pixelReturn[0];
            if (operationType.indexOf('ERROR') > -1) {
                throw new Error(output as string);
            }
            if (Array.isArray(output)) {
                if (output.length > 0) {
                    setShowDocManage(true)
                }
            }
        });
    }, [refresh]);

    function genAnswerDisabled() {
        if (isLoading) return true;
        if (selectedVectorDB === null) return true;
        if (Object.keys(selectedVectorDB).length === 0) return true;
    }
    function runOutput(output) {
        setVectorOptions(output);
        const currentUrl = new URL(window.location.href).searchParams;
        const pathSearch = output.filter(e => e["database_name"] === currentUrl.get("newDocRepo"));
        if (pathSearch.length !== 0) {
            setSelectedVectorDB(pathSearch[0]);
        } else {
            setSelectedVectorDB(output[0]);
        }
        setRefresh(false);
    }
    return (
        <StyledLayout id='styledlayout'>
            {error == 'You do not have access to the model' ? <AIBotError /> :
                <>
                    {sideOpen ? (
                        <Sidebar
                            vectorOptions={vectorOptions}
                            selectedVectorDB={selectedVectorDB}
                            setSelectedVectorDB={setSelectedVectorDB}
                            setSideOpen={setSideOpen}
                            setOpen={setOpen}
                            limit={limit}
                            setLimit={setLimit}
                            temperature={temperature}
                            setTemperature={setTemperature}
                            actions={actions}
                            setError={setError}
                            setRefresh={setRefresh}
                            setRefreshDB={null}
                            showDocManage={showDocManage}
                            isDoc={false}
                            summarySelected={summarySelected}/>
                    ) : (
                        <StyledButton onClick={() => setSideOpen(!sideOpen)}>
                            <ArrowForwardIosIcon />
                        </StyledButton>
                    )}
                    <StyledPolicy>
                        <BasicTabs
                            showContext={showContext}
                            sideOpen={sideOpen}
                            openBeta={openBeta}
                            setOpenBeta={setOpenBeta}
                            genAnswerDisabled={genAnswerDisabled}
                            setShowContext={setShowContext}
                            temperature={temperature}
                            setSummarySelected={setSummarySelected}
                            selectedVectorDB = {selectedVectorDB}
                            setSelectedVectorDB = {setSelectedVectorDB}
                            vectorOptions={vectorOptions}
                            setRefresh = {setRefresh}
                            limit = {limit}
                            open={open}
                            setOpen={setOpen}
                        />
                        <PoweredBy>Responses Generated by OpenAIâ€™s GPT-4o</PoweredBy>
                    </StyledPolicy>
                  </>
            }
        </StyledLayout>
        
    );
};
